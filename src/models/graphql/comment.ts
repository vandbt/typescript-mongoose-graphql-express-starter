 //------------------------------------------------------------------------------ 
 // <auto-generated> 
 // This code was generated by a tool. 
 // 
 // Changes to this file may cause incorrect behavior and will be lost if 
 // the code is regenerated. 
 // </auto-generated> 
 //------------------------------------------------------------------------------

import {
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLID,
  GraphQLInt,
  GraphQLFloat,
  GraphQLString,
  GraphQLList
} from "graphql";

// TODO: imports schema fields
// import {} from "../graphql";
import { CommentModel, CommentRepository } from "../mongoose-types"; // import mongoose types


/*
* Comment Type
*/
const CommentType = new GraphQLObjectType({
    name: 'Comment',
    fields: () => (
      { content: { type: GraphQLString },
  author: { type: GraphQLString },
  createdAt: { type: GraphQLString } }
    )
});

/*
* Comment Input Type
*/
const CommentInput = new GraphQLInputObjectType({
    name: 'CommentInput',
    description: 'Comment payload definition',
    fields: () => (
      { content: { type: GraphQLString },
  author: { type: GraphQLString },
  createdAt: { type: GraphQLString } }
    )
});

/*
* Comment Query
*/
const query = {
    getComments: {
        type: new GraphQLList(CommentType),
        args: {
            limit: {
                description: 'limit items in the results',
                type: GraphQLInt
            }
        },
        resolve: (root, { limit }) => CommentRepository.getInstance().find({}, {limit: limit})
    },
    getCommentById: {
        type: (CommentType),
        args: {
            _id: {
                description: 'limit items in the results',
                type: GraphQLString
            }
        },
        resolve: (root, { _id }) => CommentRepository.getInstance().findById(_id)
    },

};

/*
* Comment Mutation
*/
const mutation = {
    addComment: {
        type: CommentType,
        args: {
            input: { type: CommentInput }
        },
        resolve: (obj, input) => CommentRepository.getInstance().create(input)
    },
    updateComment: {
        type: CommentType,
        args: {
            _id: {
                description: 'id of CommentType',
                type: GraphQLString
            },
            input: { type: CommentInput }
        },
        resolve: (obj, _id, input) => CommentRepository.getInstance().update(_id, input)
    },
    removeComment: {
        type: CommentType,
        args: {
            _id: {
                description: 'id of CommentType',
                type: GraphQLString
            }
        },
        resolve: (root, { _id }) => CommentRepository.getInstance().delete(_id)
    },
};


/*
*  Comment Subscription
*/
const subscription = {

};

/*
* Comment Export
*/
export const CommentSchema = {
    query,
    mutation,
    subscription,
    types: [CommentType]
};
